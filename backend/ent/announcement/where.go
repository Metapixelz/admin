// Code generated by ent, DO NOT EDIT.

package announcement

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/bo-mathadventure/admin/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Announcement {
	return predicate.Announcement(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Announcement {
	return predicate.Announcement(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Announcement {
	return predicate.Announcement(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Announcement {
	return predicate.Announcement(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Announcement {
	return predicate.Announcement(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Announcement {
	return predicate.Announcement(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Announcement {
	return predicate.Announcement(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Announcement {
	return predicate.Announcement(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Announcement {
	return predicate.Announcement(sql.FieldLTE(FieldID, id))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Announcement {
	return predicate.Announcement(sql.FieldEQ(FieldType, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.Announcement {
	return predicate.Announcement(sql.FieldEQ(FieldMessage, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Announcement {
	return predicate.Announcement(sql.FieldEQ(FieldCreatedAt, v))
}

// ValidUntil applies equality check predicate on the "validUntil" field. It's identical to ValidUntilEQ.
func ValidUntil(v time.Time) predicate.Announcement {
	return predicate.Announcement(sql.FieldEQ(FieldValidUntil, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Announcement {
	return predicate.Announcement(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Announcement {
	return predicate.Announcement(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Announcement {
	return predicate.Announcement(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Announcement {
	return predicate.Announcement(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Announcement {
	return predicate.Announcement(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Announcement {
	return predicate.Announcement(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Announcement {
	return predicate.Announcement(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Announcement {
	return predicate.Announcement(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Announcement {
	return predicate.Announcement(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Announcement {
	return predicate.Announcement(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Announcement {
	return predicate.Announcement(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Announcement {
	return predicate.Announcement(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Announcement {
	return predicate.Announcement(sql.FieldContainsFold(FieldType, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.Announcement {
	return predicate.Announcement(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.Announcement {
	return predicate.Announcement(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.Announcement {
	return predicate.Announcement(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.Announcement {
	return predicate.Announcement(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.Announcement {
	return predicate.Announcement(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.Announcement {
	return predicate.Announcement(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.Announcement {
	return predicate.Announcement(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.Announcement {
	return predicate.Announcement(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.Announcement {
	return predicate.Announcement(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.Announcement {
	return predicate.Announcement(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.Announcement {
	return predicate.Announcement(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.Announcement {
	return predicate.Announcement(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.Announcement {
	return predicate.Announcement(sql.FieldContainsFold(FieldMessage, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Announcement {
	return predicate.Announcement(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Announcement {
	return predicate.Announcement(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Announcement {
	return predicate.Announcement(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Announcement {
	return predicate.Announcement(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Announcement {
	return predicate.Announcement(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Announcement {
	return predicate.Announcement(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Announcement {
	return predicate.Announcement(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Announcement {
	return predicate.Announcement(sql.FieldLTE(FieldCreatedAt, v))
}

// ValidUntilEQ applies the EQ predicate on the "validUntil" field.
func ValidUntilEQ(v time.Time) predicate.Announcement {
	return predicate.Announcement(sql.FieldEQ(FieldValidUntil, v))
}

// ValidUntilNEQ applies the NEQ predicate on the "validUntil" field.
func ValidUntilNEQ(v time.Time) predicate.Announcement {
	return predicate.Announcement(sql.FieldNEQ(FieldValidUntil, v))
}

// ValidUntilIn applies the In predicate on the "validUntil" field.
func ValidUntilIn(vs ...time.Time) predicate.Announcement {
	return predicate.Announcement(sql.FieldIn(FieldValidUntil, vs...))
}

// ValidUntilNotIn applies the NotIn predicate on the "validUntil" field.
func ValidUntilNotIn(vs ...time.Time) predicate.Announcement {
	return predicate.Announcement(sql.FieldNotIn(FieldValidUntil, vs...))
}

// ValidUntilGT applies the GT predicate on the "validUntil" field.
func ValidUntilGT(v time.Time) predicate.Announcement {
	return predicate.Announcement(sql.FieldGT(FieldValidUntil, v))
}

// ValidUntilGTE applies the GTE predicate on the "validUntil" field.
func ValidUntilGTE(v time.Time) predicate.Announcement {
	return predicate.Announcement(sql.FieldGTE(FieldValidUntil, v))
}

// ValidUntilLT applies the LT predicate on the "validUntil" field.
func ValidUntilLT(v time.Time) predicate.Announcement {
	return predicate.Announcement(sql.FieldLT(FieldValidUntil, v))
}

// ValidUntilLTE applies the LTE predicate on the "validUntil" field.
func ValidUntilLTE(v time.Time) predicate.Announcement {
	return predicate.Announcement(sql.FieldLTE(FieldValidUntil, v))
}

// ValidUntilIsNil applies the IsNil predicate on the "validUntil" field.
func ValidUntilIsNil() predicate.Announcement {
	return predicate.Announcement(sql.FieldIsNull(FieldValidUntil))
}

// ValidUntilNotNil applies the NotNil predicate on the "validUntil" field.
func ValidUntilNotNil() predicate.Announcement {
	return predicate.Announcement(sql.FieldNotNull(FieldValidUntil))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Announcement) predicate.Announcement {
	return predicate.Announcement(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Announcement) predicate.Announcement {
	return predicate.Announcement(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Announcement) predicate.Announcement {
	return predicate.Announcement(func(s *sql.Selector) {
		p(s.Not())
	})
}
