// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/bo-mathadventure/admin/ent/maps"
)

// Maps is the model entity for the Maps schema.
type Maps struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RoomName holds the value of the "roomName" field.
	RoomName string `json:"roomName,omitempty"`
	// MapUrl holds the value of the "mapUrl" field.
	MapUrl string `json:"mapUrl,omitempty"`
	// PolicyNumber holds the value of the "policyNumber" field.
	PolicyNumber int `json:"policyNumber,omitempty"`
	// ContactPage holds the value of the "contactPage" field.
	ContactPage string `json:"contactPage,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags []string `json:"tags,omitempty"`
	// EnableChat holds the value of the "enableChat" field.
	EnableChat bool `json:"enableChat,omitempty"`
	// EnableChatUpload holds the value of the "enableChatUpload" field.
	EnableChatUpload bool `json:"enableChatUpload,omitempty"`
	// EnableChatOnlineList holds the value of the "enableChatOnlineList" field.
	EnableChatOnlineList bool `json:"enableChatOnlineList,omitempty"`
	// EnableChatDisconnectedList holds the value of the "enableChatDisconnectedList" field.
	EnableChatDisconnectedList bool `json:"enableChatDisconnectedList,omitempty"`
	// CanReport holds the value of the "canReport" field.
	CanReport bool `json:"canReport,omitempty"`
	// ExpireOn holds the value of the "expireOn" field.
	ExpireOn time.Time `json:"expireOn,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt    time.Time `json:"createdAt,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Maps) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case maps.FieldTags:
			values[i] = new([]byte)
		case maps.FieldEnableChat, maps.FieldEnableChatUpload, maps.FieldEnableChatOnlineList, maps.FieldEnableChatDisconnectedList, maps.FieldCanReport:
			values[i] = new(sql.NullBool)
		case maps.FieldID, maps.FieldPolicyNumber:
			values[i] = new(sql.NullInt64)
		case maps.FieldRoomName, maps.FieldMapUrl, maps.FieldContactPage:
			values[i] = new(sql.NullString)
		case maps.FieldExpireOn, maps.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Maps fields.
func (m *Maps) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case maps.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case maps.FieldRoomName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field roomName", values[i])
			} else if value.Valid {
				m.RoomName = value.String
			}
		case maps.FieldMapUrl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapUrl", values[i])
			} else if value.Valid {
				m.MapUrl = value.String
			}
		case maps.FieldPolicyNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field policyNumber", values[i])
			} else if value.Valid {
				m.PolicyNumber = int(value.Int64)
			}
		case maps.FieldContactPage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contactPage", values[i])
			} else if value.Valid {
				m.ContactPage = value.String
			}
		case maps.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case maps.FieldEnableChat:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enableChat", values[i])
			} else if value.Valid {
				m.EnableChat = value.Bool
			}
		case maps.FieldEnableChatUpload:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enableChatUpload", values[i])
			} else if value.Valid {
				m.EnableChatUpload = value.Bool
			}
		case maps.FieldEnableChatOnlineList:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enableChatOnlineList", values[i])
			} else if value.Valid {
				m.EnableChatOnlineList = value.Bool
			}
		case maps.FieldEnableChatDisconnectedList:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enableChatDisconnectedList", values[i])
			} else if value.Valid {
				m.EnableChatDisconnectedList = value.Bool
			}
		case maps.FieldCanReport:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field canReport", values[i])
			} else if value.Valid {
				m.CanReport = value.Bool
			}
		case maps.FieldExpireOn:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expireOn", values[i])
			} else if value.Valid {
				m.ExpireOn = value.Time
			}
		case maps.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Maps.
// This includes values selected through modifiers, order, etc.
func (m *Maps) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// Update returns a builder for updating this Maps.
// Note that you need to call Maps.Unwrap() before calling this method if this Maps
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Maps) Update() *MapsUpdateOne {
	return NewMapsClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Maps entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Maps) Unwrap() *Maps {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Maps is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Maps) String() string {
	var builder strings.Builder
	builder.WriteString("Maps(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("roomName=")
	builder.WriteString(m.RoomName)
	builder.WriteString(", ")
	builder.WriteString("mapUrl=")
	builder.WriteString(m.MapUrl)
	builder.WriteString(", ")
	builder.WriteString("policyNumber=")
	builder.WriteString(fmt.Sprintf("%v", m.PolicyNumber))
	builder.WriteString(", ")
	builder.WriteString("contactPage=")
	builder.WriteString(m.ContactPage)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", m.Tags))
	builder.WriteString(", ")
	builder.WriteString("enableChat=")
	builder.WriteString(fmt.Sprintf("%v", m.EnableChat))
	builder.WriteString(", ")
	builder.WriteString("enableChatUpload=")
	builder.WriteString(fmt.Sprintf("%v", m.EnableChatUpload))
	builder.WriteString(", ")
	builder.WriteString("enableChatOnlineList=")
	builder.WriteString(fmt.Sprintf("%v", m.EnableChatOnlineList))
	builder.WriteString(", ")
	builder.WriteString("enableChatDisconnectedList=")
	builder.WriteString(fmt.Sprintf("%v", m.EnableChatDisconnectedList))
	builder.WriteString(", ")
	builder.WriteString("canReport=")
	builder.WriteString(fmt.Sprintf("%v", m.CanReport))
	builder.WriteString(", ")
	builder.WriteString("expireOn=")
	builder.WriteString(m.ExpireOn.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MapsSlice is a parsable slice of Maps.
type MapsSlice []*Maps
