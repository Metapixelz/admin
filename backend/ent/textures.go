// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/bo-mathadventure/admin/ent/textures"
)

// Textures is the model entity for the Textures schema.
type Textures struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Texture holds the value of the "texture" field.
	Texture string `json:"texture,omitempty"`
	// Layer holds the value of the "layer" field.
	Layer string `json:"layer,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags []string `json:"tags,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt    time.Time `json:"createdAt,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Textures) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case textures.FieldTags:
			values[i] = new([]byte)
		case textures.FieldID:
			values[i] = new(sql.NullInt64)
		case textures.FieldTexture, textures.FieldLayer, textures.FieldURL:
			values[i] = new(sql.NullString)
		case textures.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Textures fields.
func (t *Textures) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case textures.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case textures.FieldTexture:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field texture", values[i])
			} else if value.Valid {
				t.Texture = value.String
			}
		case textures.FieldLayer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field layer", values[i])
			} else if value.Valid {
				t.Layer = value.String
			}
		case textures.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				t.URL = value.String
			}
		case textures.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case textures.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Textures.
// This includes values selected through modifiers, order, etc.
func (t *Textures) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// Update returns a builder for updating this Textures.
// Note that you need to call Textures.Unwrap() before calling this method if this Textures
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Textures) Update() *TexturesUpdateOne {
	return NewTexturesClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Textures entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Textures) Unwrap() *Textures {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Textures is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Textures) String() string {
	var builder strings.Builder
	builder.WriteString("Textures(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("texture=")
	builder.WriteString(t.Texture)
	builder.WriteString(", ")
	builder.WriteString("layer=")
	builder.WriteString(t.Layer)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(t.URL)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", t.Tags))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TexturesSlice is a parsable slice of Textures.
type TexturesSlice []*Textures
