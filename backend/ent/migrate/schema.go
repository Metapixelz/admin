// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AnnouncementsColumns holds the columns for the "announcements" table.
	AnnouncementsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "type", Type: field.TypeString, Default: "ban"},
		{Name: "message", Type: field.TypeString, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "valid_until", Type: field.TypeTime, Nullable: true},
	}
	// AnnouncementsTable holds the schema information for the "announcements" table.
	AnnouncementsTable = &schema.Table{
		Name:       "announcements",
		Columns:    AnnouncementsColumns,
		PrimaryKey: []*schema.Column{AnnouncementsColumns[0]},
	}
	// BansColumns holds the columns for the "bans" table.
	BansColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "check", Type: field.TypeString},
		{Name: "message", Type: field.TypeString},
		{Name: "valid_until", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime},
	}
	// BansTable holds the schema information for the "bans" table.
	BansTable = &schema.Table{
		Name:       "bans",
		Columns:    BansColumns,
		PrimaryKey: []*schema.Column{BansColumns[0]},
	}
	// GroupsColumns holds the columns for the "groups" table.
	GroupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "permissions", Type: field.TypeJSON},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime},
	}
	// GroupsTable holds the schema information for the "groups" table.
	GroupsTable = &schema.Table{
		Name:       "groups",
		Columns:    GroupsColumns,
		PrimaryKey: []*schema.Column{GroupsColumns[0]},
	}
	// MapsColumns holds the columns for the "maps" table.
	MapsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "room_name", Type: field.TypeString},
		{Name: "map_url", Type: field.TypeString},
		{Name: "policy_number", Type: field.TypeInt},
		{Name: "contact_page", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "enable_chat", Type: field.TypeBool},
		{Name: "enable_chat_upload", Type: field.TypeBool},
		{Name: "enable_chat_online_list", Type: field.TypeBool},
		{Name: "enable_chat_disconnected_list", Type: field.TypeBool},
		{Name: "can_report", Type: field.TypeBool},
		{Name: "expire_on", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
	}
	// MapsTable holds the schema information for the "maps" table.
	MapsTable = &schema.Table{
		Name:       "maps",
		Columns:    MapsColumns,
		PrimaryKey: []*schema.Column{MapsColumns[0]},
	}
	// ReportsColumns holds the columns for the "reports" table.
	ReportsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "reported_user_comment", Type: field.TypeString, Size: 2147483647},
		{Name: "room_url", Type: field.TypeString},
		{Name: "hide", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_reported", Type: field.TypeInt, Nullable: true},
		{Name: "user_reporter", Type: field.TypeInt, Nullable: true},
	}
	// ReportsTable holds the schema information for the "reports" table.
	ReportsTable = &schema.Table{
		Name:       "reports",
		Columns:    ReportsColumns,
		PrimaryKey: []*schema.Column{ReportsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "reports_users_reported",
				Columns:    []*schema.Column{ReportsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "reports_users_reporter",
				Columns:    []*schema.Column{ReportsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TexturesColumns holds the columns for the "textures" table.
	TexturesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "texture", Type: field.TypeString, Unique: true},
		{Name: "layer", Type: field.TypeString},
		{Name: "url", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime},
	}
	// TexturesTable holds the schema information for the "textures" table.
	TexturesTable = &schema.Table{
		Name:       "textures",
		Columns:    TexturesColumns,
		PrimaryKey: []*schema.Column{TexturesColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeString, Unique: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "username", Type: field.TypeString},
		{Name: "password", Type: field.TypeString},
		{Name: "sso_identifier", Type: field.TypeString, Nullable: true},
		{Name: "permissions", Type: field.TypeJSON},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "last_login", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// GroupUsersColumns holds the columns for the "group_users" table.
	GroupUsersColumns = []*schema.Column{
		{Name: "group_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// GroupUsersTable holds the schema information for the "group_users" table.
	GroupUsersTable = &schema.Table{
		Name:       "group_users",
		Columns:    GroupUsersColumns,
		PrimaryKey: []*schema.Column{GroupUsersColumns[0], GroupUsersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "group_users_group_id",
				Columns:    []*schema.Column{GroupUsersColumns[0]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "group_users_user_id",
				Columns:    []*schema.Column{GroupUsersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AnnouncementsTable,
		BansTable,
		GroupsTable,
		MapsTable,
		ReportsTable,
		TexturesTable,
		UsersTable,
		GroupUsersTable,
	}
)

func init() {
	ReportsTable.ForeignKeys[0].RefTable = UsersTable
	ReportsTable.ForeignKeys[1].RefTable = UsersTable
	GroupUsersTable.ForeignKeys[0].RefTable = GroupsTable
	GroupUsersTable.ForeignKeys[1].RefTable = UsersTable
}
