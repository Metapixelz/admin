// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bo-mathadventure/admin/ent/predicate"
	"github.com/bo-mathadventure/admin/ent/report"
	"github.com/bo-mathadventure/admin/ent/user"
)

// ReportUpdate is the builder for updating Report entities.
type ReportUpdate struct {
	config
	hooks    []Hook
	mutation *ReportMutation
}

// Where appends a list predicates to the ReportUpdate builder.
func (ru *ReportUpdate) Where(ps ...predicate.Report) *ReportUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetReportedUserComment sets the "reportedUserComment" field.
func (ru *ReportUpdate) SetReportedUserComment(s string) *ReportUpdate {
	ru.mutation.SetReportedUserComment(s)
	return ru
}

// SetRoomUrl sets the "roomUrl" field.
func (ru *ReportUpdate) SetRoomUrl(s string) *ReportUpdate {
	ru.mutation.SetRoomUrl(s)
	return ru
}

// SetHide sets the "hide" field.
func (ru *ReportUpdate) SetHide(b bool) *ReportUpdate {
	ru.mutation.SetHide(b)
	return ru
}

// SetNillableHide sets the "hide" field if the given value is not nil.
func (ru *ReportUpdate) SetNillableHide(b *bool) *ReportUpdate {
	if b != nil {
		ru.SetHide(*b)
	}
	return ru
}

// SetCreatedAt sets the "createdAt" field.
func (ru *ReportUpdate) SetCreatedAt(t time.Time) *ReportUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (ru *ReportUpdate) SetNillableCreatedAt(t *time.Time) *ReportUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// SetReportedUserID sets the "reportedUser" edge to the User entity by ID.
func (ru *ReportUpdate) SetReportedUserID(id int) *ReportUpdate {
	ru.mutation.SetReportedUserID(id)
	return ru
}

// SetNillableReportedUserID sets the "reportedUser" edge to the User entity by ID if the given value is not nil.
func (ru *ReportUpdate) SetNillableReportedUserID(id *int) *ReportUpdate {
	if id != nil {
		ru = ru.SetReportedUserID(*id)
	}
	return ru
}

// SetReportedUser sets the "reportedUser" edge to the User entity.
func (ru *ReportUpdate) SetReportedUser(u *User) *ReportUpdate {
	return ru.SetReportedUserID(u.ID)
}

// SetReporterUserID sets the "reporterUser" edge to the User entity by ID.
func (ru *ReportUpdate) SetReporterUserID(id int) *ReportUpdate {
	ru.mutation.SetReporterUserID(id)
	return ru
}

// SetNillableReporterUserID sets the "reporterUser" edge to the User entity by ID if the given value is not nil.
func (ru *ReportUpdate) SetNillableReporterUserID(id *int) *ReportUpdate {
	if id != nil {
		ru = ru.SetReporterUserID(*id)
	}
	return ru
}

// SetReporterUser sets the "reporterUser" edge to the User entity.
func (ru *ReportUpdate) SetReporterUser(u *User) *ReportUpdate {
	return ru.SetReporterUserID(u.ID)
}

// Mutation returns the ReportMutation object of the builder.
func (ru *ReportUpdate) Mutation() *ReportMutation {
	return ru.mutation
}

// ClearReportedUser clears the "reportedUser" edge to the User entity.
func (ru *ReportUpdate) ClearReportedUser() *ReportUpdate {
	ru.mutation.ClearReportedUser()
	return ru
}

// ClearReporterUser clears the "reporterUser" edge to the User entity.
func (ru *ReportUpdate) ClearReporterUser() *ReportUpdate {
	ru.mutation.ClearReporterUser()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReportUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReportUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReportUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReportUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *ReportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(report.Table, report.Columns, sqlgraph.NewFieldSpec(report.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.ReportedUserComment(); ok {
		_spec.SetField(report.FieldReportedUserComment, field.TypeString, value)
	}
	if value, ok := ru.mutation.RoomUrl(); ok {
		_spec.SetField(report.FieldRoomUrl, field.TypeString, value)
	}
	if value, ok := ru.mutation.Hide(); ok {
		_spec.SetField(report.FieldHide, field.TypeBool, value)
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(report.FieldCreatedAt, field.TypeTime, value)
	}
	if ru.mutation.ReportedUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   report.ReportedUserTable,
			Columns: []string{report.ReportedUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ReportedUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   report.ReportedUserTable,
			Columns: []string{report.ReportedUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ReporterUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   report.ReporterUserTable,
			Columns: []string{report.ReporterUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ReporterUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   report.ReporterUserTable,
			Columns: []string{report.ReporterUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{report.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReportUpdateOne is the builder for updating a single Report entity.
type ReportUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReportMutation
}

// SetReportedUserComment sets the "reportedUserComment" field.
func (ruo *ReportUpdateOne) SetReportedUserComment(s string) *ReportUpdateOne {
	ruo.mutation.SetReportedUserComment(s)
	return ruo
}

// SetRoomUrl sets the "roomUrl" field.
func (ruo *ReportUpdateOne) SetRoomUrl(s string) *ReportUpdateOne {
	ruo.mutation.SetRoomUrl(s)
	return ruo
}

// SetHide sets the "hide" field.
func (ruo *ReportUpdateOne) SetHide(b bool) *ReportUpdateOne {
	ruo.mutation.SetHide(b)
	return ruo
}

// SetNillableHide sets the "hide" field if the given value is not nil.
func (ruo *ReportUpdateOne) SetNillableHide(b *bool) *ReportUpdateOne {
	if b != nil {
		ruo.SetHide(*b)
	}
	return ruo
}

// SetCreatedAt sets the "createdAt" field.
func (ruo *ReportUpdateOne) SetCreatedAt(t time.Time) *ReportUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (ruo *ReportUpdateOne) SetNillableCreatedAt(t *time.Time) *ReportUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// SetReportedUserID sets the "reportedUser" edge to the User entity by ID.
func (ruo *ReportUpdateOne) SetReportedUserID(id int) *ReportUpdateOne {
	ruo.mutation.SetReportedUserID(id)
	return ruo
}

// SetNillableReportedUserID sets the "reportedUser" edge to the User entity by ID if the given value is not nil.
func (ruo *ReportUpdateOne) SetNillableReportedUserID(id *int) *ReportUpdateOne {
	if id != nil {
		ruo = ruo.SetReportedUserID(*id)
	}
	return ruo
}

// SetReportedUser sets the "reportedUser" edge to the User entity.
func (ruo *ReportUpdateOne) SetReportedUser(u *User) *ReportUpdateOne {
	return ruo.SetReportedUserID(u.ID)
}

// SetReporterUserID sets the "reporterUser" edge to the User entity by ID.
func (ruo *ReportUpdateOne) SetReporterUserID(id int) *ReportUpdateOne {
	ruo.mutation.SetReporterUserID(id)
	return ruo
}

// SetNillableReporterUserID sets the "reporterUser" edge to the User entity by ID if the given value is not nil.
func (ruo *ReportUpdateOne) SetNillableReporterUserID(id *int) *ReportUpdateOne {
	if id != nil {
		ruo = ruo.SetReporterUserID(*id)
	}
	return ruo
}

// SetReporterUser sets the "reporterUser" edge to the User entity.
func (ruo *ReportUpdateOne) SetReporterUser(u *User) *ReportUpdateOne {
	return ruo.SetReporterUserID(u.ID)
}

// Mutation returns the ReportMutation object of the builder.
func (ruo *ReportUpdateOne) Mutation() *ReportMutation {
	return ruo.mutation
}

// ClearReportedUser clears the "reportedUser" edge to the User entity.
func (ruo *ReportUpdateOne) ClearReportedUser() *ReportUpdateOne {
	ruo.mutation.ClearReportedUser()
	return ruo
}

// ClearReporterUser clears the "reporterUser" edge to the User entity.
func (ruo *ReportUpdateOne) ClearReporterUser() *ReportUpdateOne {
	ruo.mutation.ClearReporterUser()
	return ruo
}

// Where appends a list predicates to the ReportUpdate builder.
func (ruo *ReportUpdateOne) Where(ps ...predicate.Report) *ReportUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReportUpdateOne) Select(field string, fields ...string) *ReportUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Report entity.
func (ruo *ReportUpdateOne) Save(ctx context.Context) (*Report, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReportUpdateOne) SaveX(ctx context.Context) *Report {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReportUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReportUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *ReportUpdateOne) sqlSave(ctx context.Context) (_node *Report, err error) {
	_spec := sqlgraph.NewUpdateSpec(report.Table, report.Columns, sqlgraph.NewFieldSpec(report.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Report.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, report.FieldID)
		for _, f := range fields {
			if !report.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != report.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.ReportedUserComment(); ok {
		_spec.SetField(report.FieldReportedUserComment, field.TypeString, value)
	}
	if value, ok := ruo.mutation.RoomUrl(); ok {
		_spec.SetField(report.FieldRoomUrl, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Hide(); ok {
		_spec.SetField(report.FieldHide, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(report.FieldCreatedAt, field.TypeTime, value)
	}
	if ruo.mutation.ReportedUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   report.ReportedUserTable,
			Columns: []string{report.ReportedUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ReportedUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   report.ReportedUserTable,
			Columns: []string{report.ReportedUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ReporterUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   report.ReporterUserTable,
			Columns: []string{report.ReporterUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ReporterUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   report.ReporterUserTable,
			Columns: []string{report.ReporterUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Report{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{report.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
