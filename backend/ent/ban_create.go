// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bo-mathadventure/admin/ent/ban"
)

// BanCreate is the builder for creating a Ban entity.
type BanCreate struct {
	config
	mutation *BanMutation
	hooks    []Hook
}

// SetCheck sets the "check" field.
func (bc *BanCreate) SetCheck(s string) *BanCreate {
	bc.mutation.SetCheck(s)
	return bc
}

// SetMessage sets the "message" field.
func (bc *BanCreate) SetMessage(s string) *BanCreate {
	bc.mutation.SetMessage(s)
	return bc
}

// SetValidUntil sets the "validUntil" field.
func (bc *BanCreate) SetValidUntil(t time.Time) *BanCreate {
	bc.mutation.SetValidUntil(t)
	return bc
}

// SetCreatedAt sets the "createdAt" field.
func (bc *BanCreate) SetCreatedAt(t time.Time) *BanCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (bc *BanCreate) SetNillableCreatedAt(t *time.Time) *BanCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// Mutation returns the BanMutation object of the builder.
func (bc *BanCreate) Mutation() *BanMutation {
	return bc.mutation
}

// Save creates the Ban in the database.
func (bc *BanCreate) Save(ctx context.Context) (*Ban, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BanCreate) SaveX(ctx context.Context) *Ban {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BanCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BanCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BanCreate) defaults() {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := ban.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BanCreate) check() error {
	if _, ok := bc.mutation.Check(); !ok {
		return &ValidationError{Name: "check", err: errors.New(`ent: missing required field "Ban.check"`)}
	}
	if _, ok := bc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "Ban.message"`)}
	}
	if _, ok := bc.mutation.ValidUntil(); !ok {
		return &ValidationError{Name: "validUntil", err: errors.New(`ent: missing required field "Ban.validUntil"`)}
	}
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Ban.createdAt"`)}
	}
	return nil
}

func (bc *BanCreate) sqlSave(ctx context.Context) (*Ban, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BanCreate) createSpec() (*Ban, *sqlgraph.CreateSpec) {
	var (
		_node = &Ban{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(ban.Table, sqlgraph.NewFieldSpec(ban.FieldID, field.TypeInt))
	)
	if value, ok := bc.mutation.Check(); ok {
		_spec.SetField(ban.FieldCheck, field.TypeString, value)
		_node.Check = value
	}
	if value, ok := bc.mutation.Message(); ok {
		_spec.SetField(ban.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := bc.mutation.ValidUntil(); ok {
		_spec.SetField(ban.FieldValidUntil, field.TypeTime, value)
		_node.ValidUntil = value
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(ban.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// BanCreateBulk is the builder for creating many Ban entities in bulk.
type BanCreateBulk struct {
	config
	builders []*BanCreate
}

// Save creates the Ban entities in the database.
func (bcb *BanCreateBulk) Save(ctx context.Context) ([]*Ban, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Ban, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BanCreateBulk) SaveX(ctx context.Context) []*Ban {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BanCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BanCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
