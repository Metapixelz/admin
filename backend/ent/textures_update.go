// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/bo-mathadventure/admin/ent/predicate"
	"github.com/bo-mathadventure/admin/ent/textures"
)

// TexturesUpdate is the builder for updating Textures entities.
type TexturesUpdate struct {
	config
	hooks    []Hook
	mutation *TexturesMutation
}

// Where appends a list predicates to the TexturesUpdate builder.
func (tu *TexturesUpdate) Where(ps ...predicate.Textures) *TexturesUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTexture sets the "texture" field.
func (tu *TexturesUpdate) SetTexture(s string) *TexturesUpdate {
	tu.mutation.SetTexture(s)
	return tu
}

// SetLayer sets the "layer" field.
func (tu *TexturesUpdate) SetLayer(s string) *TexturesUpdate {
	tu.mutation.SetLayer(s)
	return tu
}

// SetURL sets the "url" field.
func (tu *TexturesUpdate) SetURL(s string) *TexturesUpdate {
	tu.mutation.SetURL(s)
	return tu
}

// SetTags sets the "tags" field.
func (tu *TexturesUpdate) SetTags(s []string) *TexturesUpdate {
	tu.mutation.SetTags(s)
	return tu
}

// AppendTags appends s to the "tags" field.
func (tu *TexturesUpdate) AppendTags(s []string) *TexturesUpdate {
	tu.mutation.AppendTags(s)
	return tu
}

// SetCreatedAt sets the "createdAt" field.
func (tu *TexturesUpdate) SetCreatedAt(t time.Time) *TexturesUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (tu *TexturesUpdate) SetNillableCreatedAt(t *time.Time) *TexturesUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// Mutation returns the TexturesMutation object of the builder.
func (tu *TexturesUpdate) Mutation() *TexturesMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TexturesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TexturesUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TexturesUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TexturesUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TexturesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(textures.Table, textures.Columns, sqlgraph.NewFieldSpec(textures.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Texture(); ok {
		_spec.SetField(textures.FieldTexture, field.TypeString, value)
	}
	if value, ok := tu.mutation.Layer(); ok {
		_spec.SetField(textures.FieldLayer, field.TypeString, value)
	}
	if value, ok := tu.mutation.URL(); ok {
		_spec.SetField(textures.FieldURL, field.TypeString, value)
	}
	if value, ok := tu.mutation.Tags(); ok {
		_spec.SetField(textures.FieldTags, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, textures.FieldTags, value)
		})
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(textures.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{textures.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TexturesUpdateOne is the builder for updating a single Textures entity.
type TexturesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TexturesMutation
}

// SetTexture sets the "texture" field.
func (tuo *TexturesUpdateOne) SetTexture(s string) *TexturesUpdateOne {
	tuo.mutation.SetTexture(s)
	return tuo
}

// SetLayer sets the "layer" field.
func (tuo *TexturesUpdateOne) SetLayer(s string) *TexturesUpdateOne {
	tuo.mutation.SetLayer(s)
	return tuo
}

// SetURL sets the "url" field.
func (tuo *TexturesUpdateOne) SetURL(s string) *TexturesUpdateOne {
	tuo.mutation.SetURL(s)
	return tuo
}

// SetTags sets the "tags" field.
func (tuo *TexturesUpdateOne) SetTags(s []string) *TexturesUpdateOne {
	tuo.mutation.SetTags(s)
	return tuo
}

// AppendTags appends s to the "tags" field.
func (tuo *TexturesUpdateOne) AppendTags(s []string) *TexturesUpdateOne {
	tuo.mutation.AppendTags(s)
	return tuo
}

// SetCreatedAt sets the "createdAt" field.
func (tuo *TexturesUpdateOne) SetCreatedAt(t time.Time) *TexturesUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (tuo *TexturesUpdateOne) SetNillableCreatedAt(t *time.Time) *TexturesUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// Mutation returns the TexturesMutation object of the builder.
func (tuo *TexturesUpdateOne) Mutation() *TexturesMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TexturesUpdate builder.
func (tuo *TexturesUpdateOne) Where(ps ...predicate.Textures) *TexturesUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TexturesUpdateOne) Select(field string, fields ...string) *TexturesUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Textures entity.
func (tuo *TexturesUpdateOne) Save(ctx context.Context) (*Textures, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TexturesUpdateOne) SaveX(ctx context.Context) *Textures {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TexturesUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TexturesUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TexturesUpdateOne) sqlSave(ctx context.Context) (_node *Textures, err error) {
	_spec := sqlgraph.NewUpdateSpec(textures.Table, textures.Columns, sqlgraph.NewFieldSpec(textures.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Textures.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, textures.FieldID)
		for _, f := range fields {
			if !textures.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != textures.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Texture(); ok {
		_spec.SetField(textures.FieldTexture, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Layer(); ok {
		_spec.SetField(textures.FieldLayer, field.TypeString, value)
	}
	if value, ok := tuo.mutation.URL(); ok {
		_spec.SetField(textures.FieldURL, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Tags(); ok {
		_spec.SetField(textures.FieldTags, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, textures.FieldTags, value)
		})
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(textures.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &Textures{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{textures.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
