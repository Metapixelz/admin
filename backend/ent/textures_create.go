// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bo-mathadventure/admin/ent/textures"
)

// TexturesCreate is the builder for creating a Textures entity.
type TexturesCreate struct {
	config
	mutation *TexturesMutation
	hooks    []Hook
}

// SetTexture sets the "texture" field.
func (tc *TexturesCreate) SetTexture(s string) *TexturesCreate {
	tc.mutation.SetTexture(s)
	return tc
}

// SetLayer sets the "layer" field.
func (tc *TexturesCreate) SetLayer(s string) *TexturesCreate {
	tc.mutation.SetLayer(s)
	return tc
}

// SetURL sets the "url" field.
func (tc *TexturesCreate) SetURL(s string) *TexturesCreate {
	tc.mutation.SetURL(s)
	return tc
}

// SetTags sets the "tags" field.
func (tc *TexturesCreate) SetTags(s []string) *TexturesCreate {
	tc.mutation.SetTags(s)
	return tc
}

// SetCreatedAt sets the "createdAt" field.
func (tc *TexturesCreate) SetCreatedAt(t time.Time) *TexturesCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (tc *TexturesCreate) SetNillableCreatedAt(t *time.Time) *TexturesCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// Mutation returns the TexturesMutation object of the builder.
func (tc *TexturesCreate) Mutation() *TexturesMutation {
	return tc.mutation
}

// Save creates the Textures in the database.
func (tc *TexturesCreate) Save(ctx context.Context) (*Textures, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TexturesCreate) SaveX(ctx context.Context) *Textures {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TexturesCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TexturesCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TexturesCreate) defaults() {
	if _, ok := tc.mutation.Tags(); !ok {
		v := textures.DefaultTags
		tc.mutation.SetTags(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := textures.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TexturesCreate) check() error {
	if _, ok := tc.mutation.Texture(); !ok {
		return &ValidationError{Name: "texture", err: errors.New(`ent: missing required field "Textures.texture"`)}
	}
	if _, ok := tc.mutation.Layer(); !ok {
		return &ValidationError{Name: "layer", err: errors.New(`ent: missing required field "Textures.layer"`)}
	}
	if _, ok := tc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Textures.url"`)}
	}
	if _, ok := tc.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "Textures.tags"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Textures.createdAt"`)}
	}
	return nil
}

func (tc *TexturesCreate) sqlSave(ctx context.Context) (*Textures, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TexturesCreate) createSpec() (*Textures, *sqlgraph.CreateSpec) {
	var (
		_node = &Textures{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(textures.Table, sqlgraph.NewFieldSpec(textures.FieldID, field.TypeInt))
	)
	if value, ok := tc.mutation.Texture(); ok {
		_spec.SetField(textures.FieldTexture, field.TypeString, value)
		_node.Texture = value
	}
	if value, ok := tc.mutation.Layer(); ok {
		_spec.SetField(textures.FieldLayer, field.TypeString, value)
		_node.Layer = value
	}
	if value, ok := tc.mutation.URL(); ok {
		_spec.SetField(textures.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := tc.mutation.Tags(); ok {
		_spec.SetField(textures.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(textures.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// TexturesCreateBulk is the builder for creating many Textures entities in bulk.
type TexturesCreateBulk struct {
	config
	builders []*TexturesCreate
}

// Save creates the Textures entities in the database.
func (tcb *TexturesCreateBulk) Save(ctx context.Context) ([]*Textures, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Textures, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TexturesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TexturesCreateBulk) SaveX(ctx context.Context) []*Textures {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TexturesCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TexturesCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
