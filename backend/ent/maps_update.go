// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/bo-mathadventure/admin/ent/maps"
	"github.com/bo-mathadventure/admin/ent/predicate"
)

// MapsUpdate is the builder for updating Maps entities.
type MapsUpdate struct {
	config
	hooks    []Hook
	mutation *MapsMutation
}

// Where appends a list predicates to the MapsUpdate builder.
func (mu *MapsUpdate) Where(ps ...predicate.Maps) *MapsUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetRoomName sets the "roomName" field.
func (mu *MapsUpdate) SetRoomName(s string) *MapsUpdate {
	mu.mutation.SetRoomName(s)
	return mu
}

// SetMapUrl sets the "mapUrl" field.
func (mu *MapsUpdate) SetMapUrl(s string) *MapsUpdate {
	mu.mutation.SetMapUrl(s)
	return mu
}

// SetPolicyNumber sets the "policyNumber" field.
func (mu *MapsUpdate) SetPolicyNumber(i int) *MapsUpdate {
	mu.mutation.ResetPolicyNumber()
	mu.mutation.SetPolicyNumber(i)
	return mu
}

// AddPolicyNumber adds i to the "policyNumber" field.
func (mu *MapsUpdate) AddPolicyNumber(i int) *MapsUpdate {
	mu.mutation.AddPolicyNumber(i)
	return mu
}

// SetContactPage sets the "contactPage" field.
func (mu *MapsUpdate) SetContactPage(s string) *MapsUpdate {
	mu.mutation.SetContactPage(s)
	return mu
}

// SetTags sets the "tags" field.
func (mu *MapsUpdate) SetTags(s []string) *MapsUpdate {
	mu.mutation.SetTags(s)
	return mu
}

// AppendTags appends s to the "tags" field.
func (mu *MapsUpdate) AppendTags(s []string) *MapsUpdate {
	mu.mutation.AppendTags(s)
	return mu
}

// SetEnableChat sets the "enableChat" field.
func (mu *MapsUpdate) SetEnableChat(b bool) *MapsUpdate {
	mu.mutation.SetEnableChat(b)
	return mu
}

// SetEnableChatUpload sets the "enableChatUpload" field.
func (mu *MapsUpdate) SetEnableChatUpload(b bool) *MapsUpdate {
	mu.mutation.SetEnableChatUpload(b)
	return mu
}

// SetEnableChatOnlineList sets the "enableChatOnlineList" field.
func (mu *MapsUpdate) SetEnableChatOnlineList(b bool) *MapsUpdate {
	mu.mutation.SetEnableChatOnlineList(b)
	return mu
}

// SetEnableChatDisconnectedList sets the "enableChatDisconnectedList" field.
func (mu *MapsUpdate) SetEnableChatDisconnectedList(b bool) *MapsUpdate {
	mu.mutation.SetEnableChatDisconnectedList(b)
	return mu
}

// SetCanReport sets the "canReport" field.
func (mu *MapsUpdate) SetCanReport(b bool) *MapsUpdate {
	mu.mutation.SetCanReport(b)
	return mu
}

// SetExpireOn sets the "expireOn" field.
func (mu *MapsUpdate) SetExpireOn(t time.Time) *MapsUpdate {
	mu.mutation.SetExpireOn(t)
	return mu
}

// SetNillableExpireOn sets the "expireOn" field if the given value is not nil.
func (mu *MapsUpdate) SetNillableExpireOn(t *time.Time) *MapsUpdate {
	if t != nil {
		mu.SetExpireOn(*t)
	}
	return mu
}

// ClearExpireOn clears the value of the "expireOn" field.
func (mu *MapsUpdate) ClearExpireOn() *MapsUpdate {
	mu.mutation.ClearExpireOn()
	return mu
}

// SetCreatedAt sets the "createdAt" field.
func (mu *MapsUpdate) SetCreatedAt(t time.Time) *MapsUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (mu *MapsUpdate) SetNillableCreatedAt(t *time.Time) *MapsUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// Mutation returns the MapsMutation object of the builder.
func (mu *MapsUpdate) Mutation() *MapsMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MapsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MapsUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MapsUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MapsUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MapsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(maps.Table, maps.Columns, sqlgraph.NewFieldSpec(maps.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.RoomName(); ok {
		_spec.SetField(maps.FieldRoomName, field.TypeString, value)
	}
	if value, ok := mu.mutation.MapUrl(); ok {
		_spec.SetField(maps.FieldMapUrl, field.TypeString, value)
	}
	if value, ok := mu.mutation.PolicyNumber(); ok {
		_spec.SetField(maps.FieldPolicyNumber, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedPolicyNumber(); ok {
		_spec.AddField(maps.FieldPolicyNumber, field.TypeInt, value)
	}
	if value, ok := mu.mutation.ContactPage(); ok {
		_spec.SetField(maps.FieldContactPage, field.TypeString, value)
	}
	if value, ok := mu.mutation.Tags(); ok {
		_spec.SetField(maps.FieldTags, field.TypeJSON, value)
	}
	if value, ok := mu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, maps.FieldTags, value)
		})
	}
	if value, ok := mu.mutation.EnableChat(); ok {
		_spec.SetField(maps.FieldEnableChat, field.TypeBool, value)
	}
	if value, ok := mu.mutation.EnableChatUpload(); ok {
		_spec.SetField(maps.FieldEnableChatUpload, field.TypeBool, value)
	}
	if value, ok := mu.mutation.EnableChatOnlineList(); ok {
		_spec.SetField(maps.FieldEnableChatOnlineList, field.TypeBool, value)
	}
	if value, ok := mu.mutation.EnableChatDisconnectedList(); ok {
		_spec.SetField(maps.FieldEnableChatDisconnectedList, field.TypeBool, value)
	}
	if value, ok := mu.mutation.CanReport(); ok {
		_spec.SetField(maps.FieldCanReport, field.TypeBool, value)
	}
	if value, ok := mu.mutation.ExpireOn(); ok {
		_spec.SetField(maps.FieldExpireOn, field.TypeTime, value)
	}
	if mu.mutation.ExpireOnCleared() {
		_spec.ClearField(maps.FieldExpireOn, field.TypeTime)
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.SetField(maps.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{maps.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MapsUpdateOne is the builder for updating a single Maps entity.
type MapsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MapsMutation
}

// SetRoomName sets the "roomName" field.
func (muo *MapsUpdateOne) SetRoomName(s string) *MapsUpdateOne {
	muo.mutation.SetRoomName(s)
	return muo
}

// SetMapUrl sets the "mapUrl" field.
func (muo *MapsUpdateOne) SetMapUrl(s string) *MapsUpdateOne {
	muo.mutation.SetMapUrl(s)
	return muo
}

// SetPolicyNumber sets the "policyNumber" field.
func (muo *MapsUpdateOne) SetPolicyNumber(i int) *MapsUpdateOne {
	muo.mutation.ResetPolicyNumber()
	muo.mutation.SetPolicyNumber(i)
	return muo
}

// AddPolicyNumber adds i to the "policyNumber" field.
func (muo *MapsUpdateOne) AddPolicyNumber(i int) *MapsUpdateOne {
	muo.mutation.AddPolicyNumber(i)
	return muo
}

// SetContactPage sets the "contactPage" field.
func (muo *MapsUpdateOne) SetContactPage(s string) *MapsUpdateOne {
	muo.mutation.SetContactPage(s)
	return muo
}

// SetTags sets the "tags" field.
func (muo *MapsUpdateOne) SetTags(s []string) *MapsUpdateOne {
	muo.mutation.SetTags(s)
	return muo
}

// AppendTags appends s to the "tags" field.
func (muo *MapsUpdateOne) AppendTags(s []string) *MapsUpdateOne {
	muo.mutation.AppendTags(s)
	return muo
}

// SetEnableChat sets the "enableChat" field.
func (muo *MapsUpdateOne) SetEnableChat(b bool) *MapsUpdateOne {
	muo.mutation.SetEnableChat(b)
	return muo
}

// SetEnableChatUpload sets the "enableChatUpload" field.
func (muo *MapsUpdateOne) SetEnableChatUpload(b bool) *MapsUpdateOne {
	muo.mutation.SetEnableChatUpload(b)
	return muo
}

// SetEnableChatOnlineList sets the "enableChatOnlineList" field.
func (muo *MapsUpdateOne) SetEnableChatOnlineList(b bool) *MapsUpdateOne {
	muo.mutation.SetEnableChatOnlineList(b)
	return muo
}

// SetEnableChatDisconnectedList sets the "enableChatDisconnectedList" field.
func (muo *MapsUpdateOne) SetEnableChatDisconnectedList(b bool) *MapsUpdateOne {
	muo.mutation.SetEnableChatDisconnectedList(b)
	return muo
}

// SetCanReport sets the "canReport" field.
func (muo *MapsUpdateOne) SetCanReport(b bool) *MapsUpdateOne {
	muo.mutation.SetCanReport(b)
	return muo
}

// SetExpireOn sets the "expireOn" field.
func (muo *MapsUpdateOne) SetExpireOn(t time.Time) *MapsUpdateOne {
	muo.mutation.SetExpireOn(t)
	return muo
}

// SetNillableExpireOn sets the "expireOn" field if the given value is not nil.
func (muo *MapsUpdateOne) SetNillableExpireOn(t *time.Time) *MapsUpdateOne {
	if t != nil {
		muo.SetExpireOn(*t)
	}
	return muo
}

// ClearExpireOn clears the value of the "expireOn" field.
func (muo *MapsUpdateOne) ClearExpireOn() *MapsUpdateOne {
	muo.mutation.ClearExpireOn()
	return muo
}

// SetCreatedAt sets the "createdAt" field.
func (muo *MapsUpdateOne) SetCreatedAt(t time.Time) *MapsUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (muo *MapsUpdateOne) SetNillableCreatedAt(t *time.Time) *MapsUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// Mutation returns the MapsMutation object of the builder.
func (muo *MapsUpdateOne) Mutation() *MapsMutation {
	return muo.mutation
}

// Where appends a list predicates to the MapsUpdate builder.
func (muo *MapsUpdateOne) Where(ps ...predicate.Maps) *MapsUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MapsUpdateOne) Select(field string, fields ...string) *MapsUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Maps entity.
func (muo *MapsUpdateOne) Save(ctx context.Context) (*Maps, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MapsUpdateOne) SaveX(ctx context.Context) *Maps {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MapsUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MapsUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MapsUpdateOne) sqlSave(ctx context.Context) (_node *Maps, err error) {
	_spec := sqlgraph.NewUpdateSpec(maps.Table, maps.Columns, sqlgraph.NewFieldSpec(maps.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Maps.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, maps.FieldID)
		for _, f := range fields {
			if !maps.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != maps.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.RoomName(); ok {
		_spec.SetField(maps.FieldRoomName, field.TypeString, value)
	}
	if value, ok := muo.mutation.MapUrl(); ok {
		_spec.SetField(maps.FieldMapUrl, field.TypeString, value)
	}
	if value, ok := muo.mutation.PolicyNumber(); ok {
		_spec.SetField(maps.FieldPolicyNumber, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedPolicyNumber(); ok {
		_spec.AddField(maps.FieldPolicyNumber, field.TypeInt, value)
	}
	if value, ok := muo.mutation.ContactPage(); ok {
		_spec.SetField(maps.FieldContactPage, field.TypeString, value)
	}
	if value, ok := muo.mutation.Tags(); ok {
		_spec.SetField(maps.FieldTags, field.TypeJSON, value)
	}
	if value, ok := muo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, maps.FieldTags, value)
		})
	}
	if value, ok := muo.mutation.EnableChat(); ok {
		_spec.SetField(maps.FieldEnableChat, field.TypeBool, value)
	}
	if value, ok := muo.mutation.EnableChatUpload(); ok {
		_spec.SetField(maps.FieldEnableChatUpload, field.TypeBool, value)
	}
	if value, ok := muo.mutation.EnableChatOnlineList(); ok {
		_spec.SetField(maps.FieldEnableChatOnlineList, field.TypeBool, value)
	}
	if value, ok := muo.mutation.EnableChatDisconnectedList(); ok {
		_spec.SetField(maps.FieldEnableChatDisconnectedList, field.TypeBool, value)
	}
	if value, ok := muo.mutation.CanReport(); ok {
		_spec.SetField(maps.FieldCanReport, field.TypeBool, value)
	}
	if value, ok := muo.mutation.ExpireOn(); ok {
		_spec.SetField(maps.FieldExpireOn, field.TypeTime, value)
	}
	if muo.mutation.ExpireOnCleared() {
		_spec.ClearField(maps.FieldExpireOn, field.TypeTime)
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.SetField(maps.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &Maps{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{maps.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
