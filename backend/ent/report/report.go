// Code generated by ent, DO NOT EDIT.

package report

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the report type in the database.
	Label = "report"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldReportedUserComment holds the string denoting the reportedusercomment field in the database.
	FieldReportedUserComment = "reported_user_comment"
	// FieldRoomUrl holds the string denoting the roomurl field in the database.
	FieldRoomUrl = "room_url"
	// FieldHide holds the string denoting the hide field in the database.
	FieldHide = "hide"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// EdgeReportedUser holds the string denoting the reporteduser edge name in mutations.
	EdgeReportedUser = "reportedUser"
	// EdgeReporterUser holds the string denoting the reporteruser edge name in mutations.
	EdgeReporterUser = "reporterUser"
	// Table holds the table name of the report in the database.
	Table = "reports"
	// ReportedUserTable is the table that holds the reportedUser relation/edge.
	ReportedUserTable = "reports"
	// ReportedUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ReportedUserInverseTable = "users"
	// ReportedUserColumn is the table column denoting the reportedUser relation/edge.
	ReportedUserColumn = "user_reported"
	// ReporterUserTable is the table that holds the reporterUser relation/edge.
	ReporterUserTable = "reports"
	// ReporterUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ReporterUserInverseTable = "users"
	// ReporterUserColumn is the table column denoting the reporterUser relation/edge.
	ReporterUserColumn = "user_reporter"
)

// Columns holds all SQL columns for report fields.
var Columns = []string{
	FieldID,
	FieldReportedUserComment,
	FieldRoomUrl,
	FieldHide,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "reports"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_reported",
	"user_reporter",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultHide holds the default value on creation for the "hide" field.
	DefaultHide bool
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Report queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByReportedUserComment orders the results by the reportedUserComment field.
func ByReportedUserComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReportedUserComment, opts...).ToFunc()
}

// ByRoomUrl orders the results by the roomUrl field.
func ByRoomUrl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoomUrl, opts...).ToFunc()
}

// ByHide orders the results by the hide field.
func ByHide(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHide, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByReportedUserField orders the results by reportedUser field.
func ByReportedUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReportedUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByReporterUserField orders the results by reporterUser field.
func ByReporterUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReporterUserStep(), sql.OrderByField(field, opts...))
	}
}
func newReportedUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReportedUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ReportedUserTable, ReportedUserColumn),
	)
}
func newReporterUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReporterUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ReporterUserTable, ReporterUserColumn),
	)
}
