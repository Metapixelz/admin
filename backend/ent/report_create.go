// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bo-mathadventure/admin/ent/report"
	"github.com/bo-mathadventure/admin/ent/user"
)

// ReportCreate is the builder for creating a Report entity.
type ReportCreate struct {
	config
	mutation *ReportMutation
	hooks    []Hook
}

// SetReportedUserComment sets the "reportedUserComment" field.
func (rc *ReportCreate) SetReportedUserComment(s string) *ReportCreate {
	rc.mutation.SetReportedUserComment(s)
	return rc
}

// SetRoomUrl sets the "roomUrl" field.
func (rc *ReportCreate) SetRoomUrl(s string) *ReportCreate {
	rc.mutation.SetRoomUrl(s)
	return rc
}

// SetHide sets the "hide" field.
func (rc *ReportCreate) SetHide(b bool) *ReportCreate {
	rc.mutation.SetHide(b)
	return rc
}

// SetNillableHide sets the "hide" field if the given value is not nil.
func (rc *ReportCreate) SetNillableHide(b *bool) *ReportCreate {
	if b != nil {
		rc.SetHide(*b)
	}
	return rc
}

// SetCreatedAt sets the "createdAt" field.
func (rc *ReportCreate) SetCreatedAt(t time.Time) *ReportCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (rc *ReportCreate) SetNillableCreatedAt(t *time.Time) *ReportCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetReportedUserID sets the "reportedUser" edge to the User entity by ID.
func (rc *ReportCreate) SetReportedUserID(id int) *ReportCreate {
	rc.mutation.SetReportedUserID(id)
	return rc
}

// SetNillableReportedUserID sets the "reportedUser" edge to the User entity by ID if the given value is not nil.
func (rc *ReportCreate) SetNillableReportedUserID(id *int) *ReportCreate {
	if id != nil {
		rc = rc.SetReportedUserID(*id)
	}
	return rc
}

// SetReportedUser sets the "reportedUser" edge to the User entity.
func (rc *ReportCreate) SetReportedUser(u *User) *ReportCreate {
	return rc.SetReportedUserID(u.ID)
}

// SetReporterUserID sets the "reporterUser" edge to the User entity by ID.
func (rc *ReportCreate) SetReporterUserID(id int) *ReportCreate {
	rc.mutation.SetReporterUserID(id)
	return rc
}

// SetNillableReporterUserID sets the "reporterUser" edge to the User entity by ID if the given value is not nil.
func (rc *ReportCreate) SetNillableReporterUserID(id *int) *ReportCreate {
	if id != nil {
		rc = rc.SetReporterUserID(*id)
	}
	return rc
}

// SetReporterUser sets the "reporterUser" edge to the User entity.
func (rc *ReportCreate) SetReporterUser(u *User) *ReportCreate {
	return rc.SetReporterUserID(u.ID)
}

// Mutation returns the ReportMutation object of the builder.
func (rc *ReportCreate) Mutation() *ReportMutation {
	return rc.mutation
}

// Save creates the Report in the database.
func (rc *ReportCreate) Save(ctx context.Context) (*Report, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReportCreate) SaveX(ctx context.Context) *Report {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReportCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReportCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ReportCreate) defaults() {
	if _, ok := rc.mutation.Hide(); !ok {
		v := report.DefaultHide
		rc.mutation.SetHide(v)
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := report.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReportCreate) check() error {
	if _, ok := rc.mutation.ReportedUserComment(); !ok {
		return &ValidationError{Name: "reportedUserComment", err: errors.New(`ent: missing required field "Report.reportedUserComment"`)}
	}
	if _, ok := rc.mutation.RoomUrl(); !ok {
		return &ValidationError{Name: "roomUrl", err: errors.New(`ent: missing required field "Report.roomUrl"`)}
	}
	if _, ok := rc.mutation.Hide(); !ok {
		return &ValidationError{Name: "hide", err: errors.New(`ent: missing required field "Report.hide"`)}
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Report.createdAt"`)}
	}
	return nil
}

func (rc *ReportCreate) sqlSave(ctx context.Context) (*Report, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ReportCreate) createSpec() (*Report, *sqlgraph.CreateSpec) {
	var (
		_node = &Report{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(report.Table, sqlgraph.NewFieldSpec(report.FieldID, field.TypeInt))
	)
	if value, ok := rc.mutation.ReportedUserComment(); ok {
		_spec.SetField(report.FieldReportedUserComment, field.TypeString, value)
		_node.ReportedUserComment = value
	}
	if value, ok := rc.mutation.RoomUrl(); ok {
		_spec.SetField(report.FieldRoomUrl, field.TypeString, value)
		_node.RoomUrl = value
	}
	if value, ok := rc.mutation.Hide(); ok {
		_spec.SetField(report.FieldHide, field.TypeBool, value)
		_node.Hide = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(report.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := rc.mutation.ReportedUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   report.ReportedUserTable,
			Columns: []string{report.ReportedUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_reported = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ReporterUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   report.ReporterUserTable,
			Columns: []string{report.ReporterUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_reporter = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReportCreateBulk is the builder for creating many Report entities in bulk.
type ReportCreateBulk struct {
	config
	builders []*ReportCreate
}

// Save creates the Report entities in the database.
func (rcb *ReportCreateBulk) Save(ctx context.Context) ([]*Report, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Report, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReportCreateBulk) SaveX(ctx context.Context) []*Report {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReportCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReportCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
