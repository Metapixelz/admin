// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/bo-mathadventure/admin/ent/ban"
)

// Ban is the model entity for the Ban schema.
type Ban struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Check holds the value of the "check" field.
	Check string `json:"check,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// ValidUntil holds the value of the "validUntil" field.
	ValidUntil time.Time `json:"validUntil,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt    time.Time `json:"createdAt,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ban) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ban.FieldID:
			values[i] = new(sql.NullInt64)
		case ban.FieldCheck, ban.FieldMessage:
			values[i] = new(sql.NullString)
		case ban.FieldValidUntil, ban.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ban fields.
func (b *Ban) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ban.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case ban.FieldCheck:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field check", values[i])
			} else if value.Valid {
				b.Check = value.String
			}
		case ban.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				b.Message = value.String
			}
		case ban.FieldValidUntil:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field validUntil", values[i])
			} else if value.Valid {
				b.ValidUntil = value.Time
			}
		case ban.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Ban.
// This includes values selected through modifiers, order, etc.
func (b *Ban) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// Update returns a builder for updating this Ban.
// Note that you need to call Ban.Unwrap() before calling this method if this Ban
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Ban) Update() *BanUpdateOne {
	return NewBanClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Ban entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Ban) Unwrap() *Ban {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ban is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Ban) String() string {
	var builder strings.Builder
	builder.WriteString("Ban(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("check=")
	builder.WriteString(b.Check)
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(b.Message)
	builder.WriteString(", ")
	builder.WriteString("validUntil=")
	builder.WriteString(b.ValidUntil.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Bans is a parsable slice of Ban.
type Bans []*Ban
